# -*- coding: utf-8 -*-

"""
/***************************************************************************
 GoogleMapsPlaces
                                 A QGIS plugin
 This is a plugin to retrieve Places from Google using methods from the Places API.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-12-11
        copyright            : (C) 2023 by Alexandros Voukenas
        email                : avoukenas@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Alexandros Voukenas'
__date__ = '2023-12-11'
__copyright__ = '(C) 2023 by Alexandros Voukenas'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingException,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterString,
                       QgsProcessingParameterEnum,
                       QgsGeometry,
                       QgsPointXY,
                       QgsFields,
                       QgsField,
                       QgsFeature,
                       QgsCoordinateReferenceSystem)
from qgis import processing
import googlemaps
import os 
import inspect

class AttributePlacesAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT_POINTS = 'INPUT POINTS'
    INPUT_KEY = 'API KEY'
    INPUT_ATTRIBUTES = "ATTRIBUTES"
    OUTPUT = 'OUTPUT'
    OPTIONS = ["rating",
               "user_ratings_total",
               "price_level"
               ]

    def tr(self, string):
        """
        Returns a translatable string with the self.tr() function.
        """
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return AttributePlacesAlgorithm()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'attributeplaces'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Attribute Places')
    
    def icon(self):
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, 'attribute_places_logo.png')))
        return icon

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("This algorithm is used to attribute the layer of Google Maps Places downloaded from the other algorithm. \n Available options for attribution are: rating, user total reviews and price level.")

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT_POINTS,
                self.tr('Input Places points layer'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        self.addParameter(
            QgsProcessingParameterEnum(self.INPUT_ATTRIBUTES, self.tr('Types of Attributes to include'), options=self.OPTIONS,
                                       allowMultiple=True, usesStaticStrings=False, defaultValue=[]))

        self.addParameter(
            QgsProcessingParameterString(
                self.INPUT_KEY,
                self.tr('Google Maps Places API key'),
                defaultValue=''
            )
        )
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Attributed Places')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        source = self.parameterAsSource(parameters, self.INPUT_POINTS, context)
        types_list = self.parameterAsEnums(parameters, self.INPUT_ATTRIBUTES, context)
        api_key = self.parameterAsString(parameters, self.INPUT_KEY, context)
        
        original_layer=parameters[self.INPUT_POINTS]
        
        #start creating the fields for the output layer. 
        fields = QgsFields()
        fields.append(QgsField("type", QVariant.String))
        fields.append(QgsField("name", QVariant.String))
        fields.append(QgsField("place_id", QVariant.String))
        
        #add additional fields based on the selection of input attributes. For each input attribute (rating/user_reviews_total/price), add a corresponding field to the original layer
        types_keywords=[]
        for ltype in types_list:
            keyword = self.OPTIONS[ltype]
            types_keywords.append(keyword)
            
            #add new field to the original layer. These will be edited with the output of the request
            original_layer=processing.run("qgis:addfieldtoattributestable",{'INPUT':original_layer,
            'FIELD_NAME':keyword,'FIELD_TYPE':0,'FIELD_LENGTH':10,
            'FIELD_PRECISION':0,'OUTPUT':'TEMPORARY_OUTPUT'},context=context, feedback=None)['OUTPUT']
        
        #For each input attribute (rating/user_reviews_total/price), add a corresponding field to the output layer
        for keyword in sorted(types_keywords):
            fields.append(QgsField(keyword,QVariant.Double))
            
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context, fields, 4, source.sourceCrs())
        
        #create an instance of Google Maps API request
        gmaps = googlemaps.Client(api_key)
        #get the features of the input layer into an interatable 
        it = source.getFeatures()
        
        #iterate through the features
        for feature in it:
            
            #store their original attributes (place_type,place_name,place_id)
            place_type=feature.attribute(0)
            place_name=feature.attribute(1)
            place_id=feature.attribute(2)
            
            #make a list of the fields of the final layer. For the potential new attributes, the default value is Null (None)
            fields_values=[place_type,place_name,place_id,None,None,None]
            
            #make the call
            result=gmaps.place(place_id,session_token=None,fields=types_keywords)
            
            #popuolate the new fields (change from Null to a value), depending on the outcome of the request. 
            if 'price_level' in result['result'].keys():
                price=result['result']['price_level']
                fields_values[3]=price
            if 'rating' in result['result'].keys():
                av_rating=result['result']['rating']
                fields_values[4]=av_rating
            if 'user_ratings_total' in result['result'].keys():
                num_ratings=result['result']['user_ratings_total']
                fields_values[5]=num_ratings
                
        ## Return the results of the algorithm. In this case our only result is
        ## the feature sink which contains the processed features, but some
        ## algorithms may return multiple feature sinks, calculated numeric
        ## statistics, etc. These should all be included in the returned
        ## dictionary, with keys matching the feature corresponding parameter
        ## or output names.
             
        
        #write the output in the sink (feature, geometry, and id attribute)
            new_feature =  QgsFeature()
            new_feature.setGeometry(feature.geometry())
            new_feature.setAttributes(fields_values)
            sink.addFeature(new_feature, QgsFeatureSink.FastInsert)
            
        return {self.OUTPUT: dest_id}